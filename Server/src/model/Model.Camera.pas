unit Model.Camera;

interface

uses
  MVCFramework.ActiveRecord,
  MVCFramework.Serializer.Commons;

type
  [MVCNameCase(TMVCNameCase.ncLowerCase)]
  [MVCTable('cameras')]
  TCamera = class(TMVCActiveRecord)
  private
    [MVCTableField('id', [foPrimaryKey, foAutoGenerated])]
    FId: Integer;
    [MVCTableField('name')]
    FName: String;
    [MVCTableField('config_id')]
    FConfig_Id: Integer;
    [MVCTableField('fps')]
    FFps: Integer;
    [MVCTableField('server_guid')]
    FServer_Guid: string;


    procedure SetConfig_Id(const Value: Integer);
    procedure SetFps(const Value: Integer);
    procedure SetId(const Value: Integer);
    procedure SetName(const Value: string);
    procedure SetServer_Guid(const Value: string);
  public
    constructor Create;override;
    destructor Destroy;override;

    property Id: Integer read FId write SetId;
    property Name: string read FName write SetName;
    property Config_Id: Integer read FConfig_Id write SetConfig_Id;
    property Fps: Integer read FFps write SetFps;
    property Server_Guid: string read FServer_Guid write SetServer_Guid;

  end;

implementation

{ TCamera }

constructor TCamera.Create;
begin
  inherited Create;
end;

destructor TCamera.Destroy;
begin
  inherited;
end;

procedure TCamera.SetConfig_Id(const Value: Integer);
begin
  FConfig_Id := Value;
end;

procedure TCamera.SetFps(const Value: Integer);
begin
  FFps := Value;
end;

procedure TCamera.SetId(const Value: Integer);
begin
  FId := Value;
end;

procedure TCamera.SetName(const Value: String);
begin
  FName := Value;
end;

procedure TCamera.SetServer_Guid(const Value: string);
begin
  FServer_Guid := Value;
end;

end.
